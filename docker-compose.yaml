version: "3.9"

services:
  keycloak:
      # https://github.com/keycloak/keycloak-containers#getting-started
      image: quay.io/keycloak/keycloak:legacy
      container_name: keycloak
      hostname: "keycloak.${CONTAINER_DOMAIN}"
      networks:
        - vault-playground
      environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: keycloak-postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
      ports:
        - 8080:8080
      depends_on:
        - keycloak-postgres
  keycloak-postgres:
      image: docker.io/library/postgres:14.0-alpine
      container_name: keycloak-postgres
      hostname: "keycloak-postgres.${CONTAINER_DOMAIN}"
      networks:
        - vault-playground
      volumes:
        - ./docker/keycloak-postgres:/var/lib/postgresql/data:Z
      environment:
        POSTGRES_DB: keycloak
        POSTGRES_USER: keycloak
        POSTGRES_PASSWORD: password

  ipa:
    image: docker.io/freeipa/freeipa-server:centos-8-4.9.6
    command: "ipa-server-install -U -r ${IPA_REALM} --no-ntp"
    environment:
      PASSWORD: Secret123
    container_name: ipa
    # Container needs to be invoked with fully-qualified hostname
    hostname: "ipa.${CONTAINER_DOMAIN}"
    networks:
      - vault-playground
    volumes:
      - ./docker/ipa:/data:Z
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0

  vault:
    image: docker.io/hashicorp/vault-enterprise:latest
    container_name: vault
    hostname: "vault.${CONTAINER_DOMAIN}"
    cap_add:
      - IPC_LOCK
    networks:
      - vault-playground
    command: server
    volumes:
      - ./docker/vault/config:/vault/config:Z
      - ./docker/vault/data:/vault/file:Z
    environment:
      - VAULT_ADDR=http://127.0.0.1:8200
      - VAULT_TOKEN=hvs.bJIwbMgjDjTbx88kH6mRaUFd
      - VAULT_LICENSE=$VAULT_LICENSE
      - VAULT_RAFT_NODE_ID=node0
      - VAULT_API_ADDR=http://vault:8200
      - VAULT_CLUSTER_ADDR=http://vault:8201
    ports:
      - 8200:8200
      - 8201:8201
    # extra_hosts:
    #     # Makes this name resolve inside the container for Linux test hosts (used for Statsd Telemetry addresss)
    #     # https://docs.docker.com/desktop/networking/#i-want-to-connect-from-a-container-to-a-service-on-the-host
    #   - host.docker.internal:host-gateway

  terraform:
    build:
      context: ./terraform-dockerfile
      dockerfile: Dockerfile
    container_name: terraform
    hostname: "terraform.${CONTAINER_DOMAIN}"
    networks:
      - vault-playground
    # remove state from old Vault dev mode, init, re-apply and leave running for debugging purposes
    entrypoint: /bin/sh -c 'terraform init && terraform apply -auto-approve'
    working_dir: "/terraform"
    environment:
      # - TF_LOG=debug
      - VAULT_ADDR=http://vault.${CONTAINER_DOMAIN}:8200
      - VAULT_TOKEN=hvs.bJIwbMgjDjTbx88kH6mRaUFd
      - CHECKPOINT_DISABLE=true
      - TF_VAR_container_domain=${CONTAINER_DOMAIN}
    volumes:
      - ./docker/terraform:/terraform:Z
      - ./docker/k3s/output:/root/.kube:Z
    depends_on:
      - keycloak
      - k3s-server

  k3s-server:
    # https://github.com/k3s-io/k3s/blob/master/docker-compose.yml
    image: "docker.io/rancher/k3s:${K3S_VERSION:-latest}"
    container_name: k3s-server
    hostname: "k3s-server.${CONTAINER_DOMAIN}"
    networks:
      - vault-playground
    command: server
    tmpfs:
      - /run
      - /var/run
    ulimits:
      nproc: 65535
      nofile:
        soft: 65535
        hard: 65535
    privileged: true
    environment:
      - K3S_TOKEN=${K3S_TOKEN:-k3s}
      - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
      - K3S_KUBECONFIG_MODE=666
    volumes:
      - ./docker/k3s:/var/lib/rancher/k3s:Z
      # Needs to be a shared mount for Kubernetes CSI Drivers
      # (Pod volume sharing, mount propagation):
      # https://kubernetes-csi.github.io/docs/deploying.html
      - /tmp/k3s-local-pods:/var/lib/kubelet:shared
      # This is just so that we get the kubeconfig file out
      - ./docker/k3s/output:/output:Z
    ports:
      - 6443:6443 # Kubernetes API Server

  grafana:
    image: docker.io/grafana/grafana:latest
    container_name: grafana
    hostname: "grafana.${CONTAINER_DOMAIN}"
    networks:
      - vault-playground
    ports:
      - 3000:3000
    environment:
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      # - ./docker/grafana_data:/var/lib/grafana
      - ./docker/grafana_provisioning:/etc/grafana/provisioning:Z
      - ./docker/grafana_dashboards:/var/lib/grafana/dashboards:Z

  prometheus:
    image: docker.io/prom/prometheus:latest
    container_name: prometheus
    hostname: "prometheus.${CONTAINER_DOMAIN}"
    networks:
      - vault-playground
    volumes:
      - ./docker/prometheus_etc/prometheus.yml:/etc/prometheus/prometheus.yml:Z
      - ./docker/prometheus_etc/vault_rules.yml:/etc/prometheus/vault_rules.yml:Z
      #sudo chown -R nobody: docker/prometheus_data/
      # - ./docker/prometheus_data:/prometheus
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090

  es:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    container_name: es
    hostname: "es.${CONTAINER_DOMAIN}"
    userns: keep-id
    networks:
      - vault-playground
    volumes:
      - ./docker/es:/usr/share/elasticsearch/data:Z,U
    ports:
      - 9200:9200
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    mem_limit: ${MEM_LIMIT}

  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    userns: keep-id
    hostname: "kibana.${CONTAINER_DOMAIN}"
    networks:
      - vault-playground
    volumes:
      - ./docker/kibana:/usr/share/kibana/data:Z,U
    ports:
      - 5601:5601
    environment:
      - ELASTICSEARCH_HOSTS=http://es.${CONTAINER_DOMAIN}:9200
    mem_limit: ${MEM_LIMIT}

  metricbeat:
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    container_name: metricbeat
    hostname: "metricbeat.${CONTAINER_DOMAIN}"
    networks:
      - vault-playground
    volumes:
      - ./docker/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:Z
      - ./docker/metricbeat/statsd.yml:/usr/share/metricbeat/modules.d/statsd.yml:Z
    ports:
      - 8125:8125/udp
    environment:
      - setup.kibana.host=kibana.${CONTAINER_DOMAIN}:5601
      - ELASTICSEARCH_HOSTS="es.${CONTAINER_DOMAIN}:9200"

networks:
  vault-playground:
